generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Sessions associated with current node. Only populated if the node is a
/// session maker.
model Session {
  environmentKey String
  session        String
  /// As recorded by the current node. Just to help identify sessions during
  /// analysis.
  createdAt      BigInt

  @@id([environmentKey, session])
}

model Record {
  environmentKey String
  /// Source path, e.g.
  /// 'nodeName:nodeSession/nodeName2/deviceName:deviceSession'. Always starts
  /// with the current node instance (name and possibly session), as it is
  /// prefixed to all incoming records.
  path           String
  /// Unix microseconds, as recorded by the device (whose clock *should* be
  /// roughly synced). Each new message from the same device *should* have an
  /// increasing `ts`, so `ts` can be used for pagination even as new messages
  /// arrive (when scoped to a path).
  ts             BigInt
  data           Json

  /// Metadata for syncing with the parent node.
  receivedAtIndex Int     @default(autoincrement())
  /// Metadata for syncing with the parent node.
  sentToParent    Boolean @default(false)

  @@id([environmentKey, path, ts])
}

model Message {
  environmentKey String
  /// Target path, e.g.
  /// 'nodeName:nodeSession/nodeName2/deviceName:deviceSession'. Always starts
  /// with the current node instance (name and possibly session), as it is
  /// prefixed to all incoming records.
  path           String
  /// Unix microseconds, as recorded by the current node. Represents when the
  /// current node received the message. Guaranteed that each new message will
  /// have an increasing `ts`, so `ts` can be used for pagination even as new
  /// messages arrive (when scoped to a path).
  ts             BigInt
  data           Json

  @@id([environmentKey, path, ts])
}
