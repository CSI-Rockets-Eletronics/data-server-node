generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Sessions associated with current node. The current session is the one with
/// the latest `createdAt`. Each session spans from its `createdAt` to the next
/// smallest `createdAt` within the environment.
model Session {
  environmentKey String
  /// Human-readable name
  name           String
  /// Unix microseconds, as recorded by the current node. Guaranteed that each
  /// new session will have an increasing `createdAt` (when scoped to an
  /// environment).
  createdAt      BigInt

  @@id([environmentKey, name])
  @@unique([environmentKey, createdAt])
}

model Record {
  environmentKey String
  device         String
  /// Unix microseconds, as recorded by the device (which *should* have a
  /// real-time clock). Each new message from the same device *should* have an
  /// increasing `ts`, so `ts` can be used for pagination even as new messages
  /// arrive (when scoped to a path).
  ts             BigInt
  data           Json

  /// Metadata for syncing with the parent node.
  sentToParent    Boolean @default(false)
  /// Metadata for syncing with the parent node.
  receivedAtIndex Int     @default(autoincrement())

  @@id([environmentKey, device, ts])
  @@index([sentToParent, receivedAtIndex])
}

model Message {
  environmentKey String
  device         String
  /// Unix microseconds, as recorded by the current node. Represents when the
  /// current node received the message. Guaranteed that each new message will
  /// have an increasing `ts`, so `ts` can be used for pagination even as new
  /// messages arrive.
  ts             BigInt @id
  data           Json

  @@index([environmentKey, device, ts])
}
